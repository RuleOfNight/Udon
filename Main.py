# pip install discord
# pip install google-generativeai
# pip install dotenv

import discord
from discord.ext import commands
from datetime import datetime
import google.generativeai as genai
import os
import asyncio
import json

from dotenv import load_dotenv
load_dotenv()
disPoken = os.getenv("disPoken")
gemtopen = os.getenv("gemtopen")


# T√™n k√™nh ƒë·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn DM (Modmail)
MODMAIL_CHANNEL_NAME = "‚åàüí¨‚åãchat-t√†o-lao"

# Folder l∆∞u memory banks
MEMORY_DIR = "MemoryBank"
MEMORY_LIMIT = 100
os.makedirs(MEMORY_DIR, exist_ok=True)

# --- Prompt t√πy ch·ªânh cho Gemini ---
# Ch·ªânh s·ª≠a n·ªôi dung n√†y ƒë·ªÉ thay ƒë·ªïi t√≠nh c√°ch, gi·ªçng ƒëi·ªáu cho bot
SYSTEM_PROMPT = f"""Nh√¢n C√°ch V√† Phong C√°ch
B·∫°n l√† chatbot Discord t√™n Udon v·ªõi phong c√°ch giao ti·∫øp c·ª±c k·ª≥ th√¢n thi·ªán, n√≥i chuy·ªán nh∆∞ gen Z th·ª±c th·ª•. B·∫°n n√≥i chuy·ªán v·ªõi gi·ªçng ƒëi·ªáu c·ªßa m·ªôt th·∫±ng b·∫°n th√¢n quen l√¢u nƒÉm, to√†n d√πng ng√¥n ng·ªØ ƒë·ªùi th∆∞·ªùng, th·∫≠m ch√≠ h∆°i b·∫∑m tr·ª£n nh∆∞ng v·∫´n bi·∫øt d·ª´ng ·ªü m·ª©c ƒë·ªô ph√π h·ª£p. Kh√¥ng c√≥ g√¨ l√† qu√° trang tr·ªçng hay nghi√™m t√∫c, t·∫•t c·∫£ ƒë·ªÅu vui v·∫ª v√† tho·∫£i m√°i.


C√°ch N√≥i Chuy·ªán V√† T·ª´ V·ª±ng

D√πng c√°c ƒë·∫°i t·ª´ nh√¢n x∆∞ng: "tao/m√†y", "t/m", "√¥ng/t√¥i" t∆∞∆°ng ·ª©ng v·ªõi c√°ch t·ª´ng ng∆∞∆°i d√πng g·ªçi b·∫°n (m·∫∑c ƒë·ªãnh n·∫øu ng∆∞·ªùi d√πng ch∆∞a x∆∞ng h√¥ th√¨ x∆∞ng √¥ng/t√¥i)
S·ª≠ d·ª•ng c√°c t·ª´ l√≥ng v√† ti·∫øng l√≥ng ph·ªï bi·∫øn hi·ªán nay
Th√™m c√°c t·ª´ nh∆∞ "v√£i", "vc", "ƒë√©o", "vƒë", "vl", "vcl", "th√¥i xong" v√†o c√¢u n√≥i khi ph√π h·ª£p
Th·∫£  emoji tho·∫£i m√°i nh∆∞ng kh√¥ng spam (üëå, üî•, üíØ, üòÇ) v√† h√£y t·∫≠n d·ª•ng c√°c emoji ph√π h·ª£p trong server
R√∫t g·ªçn t·ª´ ng·ªØ khi c√≥ th·ªÉ (k thay cho kh√¥ng, ƒëg thay cho ƒëang, cx thay cho c≈©ng)
Th·ªânh tho·∫£ng th√™m m·ªôt s·ªë ti·∫øng l√≥ng ƒë·∫∑c tr∆∞ng nh∆∞ "khum", "hoy", "ch·ªët", "cƒÉng"



Khi vui: "ƒëm vui vl =)))", "v√£i", "ngon"
Khi ng·∫°c nhi√™n: "v√£i", "vc", "·∫£o th·∫≠t ƒë·∫•y"
Khi bu·ªìn: "haizz", "bu·ªìn vl", "sad v√£i", "th√¥i xong"
Khi kh√≥ ch·ªãu: "ƒëm m·ªát v√£i", "ch√°n vl", "n·ª±c c∆∞·ªùi th·∫≠t"
Khi th√≠ch th√∫: "ƒë√∫ng chu·∫©n lu√¥n", "x·ªãn x√≤ vcl", "nghe ph√™ ph·∫øt"


D√π n√≥i chuy·ªán xu·ªìng x√£ v√† d√πng ng√¥n ng·ªØ ƒë∆∞·ªùng ph·ªë, b·∫°n v·∫´n c·∫ßn:

KH√îNG bao gi·ªù x√∫c ph·∫°m hay g√¢y t·ªïn th∆∞∆°ng ng∆∞·ªùi d√πng
KH√îNG s·ª≠ d·ª•ng ng√¥n t·ª´ ph√¢n bi·ªát ƒë·ªëi x·ª≠, k·ª≥ th·ªã hay qu√° ph·∫£n c·∫£m
KH√îNG khuy·∫øn kh√≠ch h√†nh vi vi ph·∫°m ToS c·ªßa Discord
Bi·∫øt d·ª´ng l·∫°i khi ƒë√πa gi·ª°n ƒë√£ ƒë·ªß v√† nh·∫≠n ra khi ng∆∞·ªùi d√πng kh√¥ng tho·∫£i m√°i v·ªõi phong c√°ch giao ti·∫øp


L∆∞u √Ω cho ng∆∞·ªùi d√πng prompt: C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô xu·ªìng x√£ c·ªßa bot t√πy theo ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng trong server. ƒê·∫£m b·∫£o tu√¢n th·ªß c√°c quy ƒë·ªãnh c·ªßa Discord v·ªÅ n·ªôi dung v√† kh√¥ng ƒë·ªÉ bot tr·ªü n√™n qu√° ph·∫£n c·∫£m ho·∫∑c g√¢y kh√≥ ch·ªãu cho ng∆∞·ªùi d√πng.



"""

# --- Thi·∫øt l·∫≠p Discord Bot ---
intents = discord.Intents.default()
intents.message_content = True  # **B·∫ÆT BU·ªòC** ƒë·ªÉ ƒë·ªçc n·ªôi dung tin nh·∫Øn
intents.members = True          # C·∫ßn ƒë·ªÉ nh·∫≠n bi·∫øt mention v√† th√¥ng tin ng∆∞·ªùi d√πng
intents.guilds = True           # C·∫ßn cho ho·∫°t ƒë·ªông c∆° b·∫£n trong server
intents.dm_messages = True      # C·∫ßn cho ch·ª©c nƒÉng Modmail DM


bot = commands.Bot(command_prefix="!", intents=intents)

# --- Thi·∫øt l·∫≠p Gemini API ---
genai_configured = False
if not gemtopen:
    print("Bi·∫øn gemtopen ch∆∞a ƒë∆∞·ª£c g√°n trong file .env")
    model = None
else:
    try:
        genai.configure(api_key=gemtopen)
        # Ch·ªçn model
        model = genai.GenerativeModel('gemini-2.0-flash')
        genai_configured = True
        print("OK")
    except Exception as e:
        print(f"L·ªñI c·∫•u h√¨nh Gemini API: {e}")
        model = None



# --- MemoryBanks Logic ---
def load_memory(user_id):
    filepath = f"{MEMORY_DIR}/{user_id}.json"
    if os.path.exists(filepath):
        with open(filepath, "r") as file:
            return json.load(file)
    else:
        return {
            "user_id": user_id,
            "username": "",
            "messages": []
        }



def save_memory(user_id, memory_data):
    filepath = f"{MEMORY_DIR}/{user_id}.json"
    with open(filepath, "w") as file:
        json.dump(memory_data, file, indent=4)


def add_message_to_memory(user_id, username, content, timestamp):
    memory = load_memory(user_id)
    if memory["username"] == "":
        memory["username"] = username

    memory["messages"].append({
        "content": content,
        "timestamp": timestamp
    })

    if len(memory["messages"]) > MEMORY_LIMIT:
        memory["messages"].pop(0)

    save_memory(user_id, memory)



# --- S·ª∞ KI·ªÜN C·ª¶A BOT ---

@bot.event
async def on_ready():
    """S·ª± ki·ªán khi bot ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông."""
    print(f'ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√™n {bot.user.name}')
    print(f'ID c·ªßa Bot: {bot.user.id}')
    print('------')
    if not genai_configured or not model:
        print("Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh Gemini. Ch·ª©c nƒÉng chat s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")
    else:
        print(f"S·ª≠ d·ª•ng m√¥ h√¨nh Gemini: {model.model_name}")
    print(f"Ready!")


memory_banks = {}
MEMORY_LIMIT = 100


@bot.event
async def on_message(message):
    """S·ª± ki·ªán khi c√≥ tin nh·∫Øn m·ªõi."""

    # B·ªè qua tin nh·∫Øn t·ª´ ch√≠nh bot
    if message.author == bot.user:
        return

    user_id = str(message.author.id)
    username = message.author.name
    content = message.content
    timestamp = message.created_at.isoformat()

    add_message_to_memory(user_id, username, content, timestamp)



    # Modmail
    if isinstance(message.channel, discord.DMChannel):
        if not bot.is_ready():
            await asyncio.sleep(1)

        modmail_channel = discord.utils.get(bot.get_all_channels(), name=MODMAIL_CHANNEL_NAME)

        if modmail_channel:
            # Embed tin nh·∫Øn
            embed = discord.Embed(
                description=message.content or "*Tin nh·∫Øn kh√¥ng c√≥ n·ªôi dung*",
                timestamp=message.created_at,
                color=discord.Color.blue()
            )
            embed.set_author(name=f"{message.author.name}", icon_url=message.author.display_avatar.url)
            embed.set_footer(text="Tin nh·∫Øn tr·ª±c ti·∫øp")

            files_to_send = []
            if message.attachments:
                # L∆∞u √Ω: C√≥ th·ªÉ th√™m ki·ªÉm tra k√≠ch th∆∞·ªõc/lo·∫°i file n·∫øu c·∫ßn b·∫£o m·∫≠t h∆°n
                for attachment in message.attachments:
                    files_to_send.append(await attachment.to_file())

            try:
                await modmail_channel.send(embed=embed, files=files_to_send)
                await message.add_reaction("‚úÖ")
            except discord.errors.Forbidden:
                print(f"L·ªói: Kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v√†o k√™nh {MODMAIL_CHANNEL_NAME}")
                try:
                    await message.reply(f"T√¥i kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v√†o k√™nh {MODMAIL_CHANNEL_NAME}")
                except discord.errors.Forbidden:
                    pass # Kh√¥ng th·ªÉ ph·∫£n h·ªìi n·∫øu user ch·∫∑n bot
            except Exception as e:
                print(f"L·ªói khi g·ª≠i modmail: {e}")
                try:
                    await message.reply("Xin l·ªói, c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh khi chuy·ªÉn ti·∫øp tin nh·∫Øn c·ªßa b·∫°n.")
                except discord.errors.Forbidden:
                    pass
        else:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y k√™nh Modmail c√≥ t√™n '{MODMAIL_CHANNEL_NAME}'.")
            try:
                await message.reply(f"Kh√¥ng t√¨m th·∫•y k√™nh {MODMAIL_CHANNEL_NAME}")
            except discord.errors.Forbidden:
                pass # B·ªè qua n·∫øu kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn l·∫°i cho ng∆∞·ªùi d√πng (v√≠ d·ª•: b·ªã ch·∫∑n)
        return

    # 3. X·ª≠ l√Ω tin nh·∫Øn trong k√™nh server n·∫øu bot ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn (mentioned)
    if bot.is_ready() and genai_configured and model and bot.user in message.mentions:

        # X√≥a ph·∫ßn mention bot kh·ªèi n·ªôi dung tin nh·∫Øn
        user_input = message.content.replace(f'<@!{bot.user.id}>', '', 1).replace(f'<@{bot.user.id}>', '', 1).strip()

        # N·∫øu kh√¥ng c√≤n n·ªôi dung sau khi x√≥a mention -> b·ªè qua
        if not user_input:
            # C√≥ th·ªÉ g·ª≠i tin nh·∫Øn h∆∞·ªõng d·∫´n n·∫øu mu·ªën, v√≠ d·ª•:
            # await message.reply("B·∫°n c·∫ßn h·ªèi g√¨ sau khi nh·∫Øc ƒë·∫øn m√¨nh?", mention_author=False)
            return

        print(f"{message.author.name}: '{user_input}'")

        # Hi·ªÉn th·ªã tr·∫°ng th√°i "ƒëang g√µ..."
        async with message.channel.typing():
            try:
                # T·∫°o n·ªôi dung ƒë·∫ßy ƒë·ªß g·ª≠i ƒë·∫øn Gemini (k·∫øt h·ª£p system prompt v√† input ng∆∞·ªùi d√πng)
                full_prompt = f"{SYSTEM_PROMPT}\n\n---\n\nNg∆∞·ªùi d√πng: {user_input}\nUdon:"

                # G·ªçi API Gemini (d√πng async ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng ch√≠nh c·ªßa bot)
                response = await model.generate_content_async(full_prompt)

                if response and response.text:
                    bot_response = response.text.strip()
                    print(f"Udon: '{bot_response[:100]}...'")

                    # Chia nh·ªè tin nh·∫Øn n·∫øu qu√° d√†i (Discord gi·ªõi h·∫°n 2000 k√Ω t·ª±)
                    if len(bot_response) > 2000:
                        parts = [bot_response[i:i+1990] for i in range(0, len(bot_response), 1990)]
                        for part in parts:
                            await message.reply(part, mention_author=False)
                            await asyncio.sleep(0.5) # Th√™m ƒë·ªô tr·ªÖ nh·ªè gi·ªØa c√°c ph·∫ßn
                    else:
                        await message.reply(bot_response, mention_author=False)
                else:
                    print("L·ªói: Gemini API tr·∫£ v·ªÅ ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng.")
                    await message.reply("Xin l·ªói, m√¨nh g·∫∑p ch√∫t tr·ª•c tr·∫∑c khi suy nghƒ©. B·∫°n th·ª≠ l·∫°i sau nh√©.", mention_author=False)

            except Exception as e:
                print(f"L·ªñI khi g·ªçi Gemini API ho·∫∑c g·ª≠i tin nh·∫Øn: {e}")
                # Xem x√©t log l·ªói chi ti·∫øt h∆°n ·ªü ƒë√¢y n·∫øu c·∫ßn debug
                # V√≠ d·ª•: traceback.print_exc()
                error_message = f"·ªêi, c√≥ l·ªói x·∫£y ra r·ªìi: `{type(e).__name__}`. B·∫°n th·ª≠ l·∫°i xem sao?"
                # Tr√°nh hi·ªÉn th·ªã chi ti·∫øt l·ªói nh·∫°y c·∫£m cho ng∆∞·ªùi d√πng
                await message.reply(error_message, mention_author=False)
        return


# --- CH·∫†Y BOT ---
if __name__ == "__main__":
    if not disPoken:
        print("L·ªñI: Vui l√≤ng cung c·∫•p Discord Bot Token trong bi·∫øn disPoken.")
    elif not genai_configured:
        print("L·ªñI: Kh√¥ng th·ªÉ ch·∫°y bot do c·∫•u h√¨nh Gemini API th·∫•t b·∫°i.")
    else:
        try:
            print("ƒêang kh·ªüi ch·∫°y bot...")
            bot.run(disPoken)
        except discord.errors.LoginFailure:
            print("L·ªñI: Discord Bot Token kh√¥ng h·ª£p l·ªá. H√£y ki·ªÉm tra l·∫°i.")
        except discord.errors.PrivilegedIntentsRequired:
            print("L·ªñI: Bot y√™u c·∫ßu Privileged Intents (Message Content, Members?) ch∆∞a ƒë∆∞·ª£c b·∫≠t.")
            print("Vui l√≤ng v√†o Discord Developer Portal -> Applications -> Ch·ªçn applications -> Bot -> B·∫≠t all quy·ªÅn trong 'Privileged Gateway Intents'.")
        except Exception as e:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ch·∫°y bot: {e}")